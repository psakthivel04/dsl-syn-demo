$|=1;
use utf8;
use ElectricCommander;
use ElectricCommander::ReportUtils;

our $cmdr = new ElectricCommander();
$cmdr->abortOnError(0);

our $reportTitle = "$[/javascript myParent["Report Title"]]";
if ($reportTitle eq "") { $reportTitle = "Procedure Usage Report"; }
our $reportType = qq{$[/javascript myParent["Report Type"]]};
if ($reportType eq "") { $reportType = $reportTitle; }
our $reportFormat = "html"; #html,pdf,doc,xls
our $reportName = safeFileName("$reportTitle.$reportFormat");
our $artifactsDir = "artifacts";
our $agentInstallDir = getAgentInstallDir();
our $pluginDir = "$ENV{'COMMANDER_PLUGINS'}/$[/plugins/EC-Reports/pluginName]";
our $reportDesignFile = "$pluginDir/agent/reports/ProcedureUsage/ProcedureUsage.rptdesign";
our $birtInstallDir = "$ENV{'COMMANDER_PLUGINS'}/$[/plugins/EC-ReportEngine]/agent";
our $ecextractXmlFile = safeFileName("ecextract-$reportType-$[/increment /myJob/xmlCounter].xml");
our @locales = getLocales();
our $numSeries = 1;

# set artifacts directory
createAndRegisterArtifactsDir($artifactsDir);

# extract report data
extractReportData();

# prepare report arguments
my @reportArgs = getReportArgs();

# generate report
if ( ecgenerateReport($agentInstallDir, $birtInstallDir, $artifactsDir, @reportArgs) ) {
    exit (1);
}

# register report in the project report tab and in the job details links area
registerReportTabAndLinks();

print "Finished Creating report.\n";
exit (0);

#-------------------------------------------------------------------------
# createAndRegisterArtifactsDir
#
#       Create and register the artifacts directory
#-------------------------------------------------------------------------
sub createAndRegisterArtifactsDir($)
{
    my ($artifactsDirName) = @_;
    mkdir($artifactsDirName);
    registerArtifactsDirectory($cmdr, "$[jobId]", $artifactsDirName);
}

#-------------------------------------------------------------------------
# extractReportData
#
#       Extract report data from Commander using ecextract utility
#-------------------------------------------------------------------------
sub extractReportData()
{
    my $command = "ec-perl \"$pluginDir/agent/bin/ecextract.pl\" "
        . " --load \"$pluginDir/agent/reports/ProcedureUsage/ProcedureUsage.ecextractloadfile\" "
        . " --debug 3"
        . " --outputPath \"$ecextractXmlFile\""
        . " --credential \"$[/javascript myParent["Credential"]]\""
        . " -- --project \"$[/javascript myParent["Project"]]\""
        . " --procedure \"$[/javascript myParent["Project Procedure"]]\""
    ;

    print "data extract [$command]\n";
    my $result = `$command`;
    print "extract result:\n$result";
    if ($?) {
        exit (1);
    }
}

#-------------------------------------------------------------------------
# getReportArgs
#
#       Get report arguments
#-------------------------------------------------------------------------
sub getReportArgs() {
    # args for creating report
    my @args = (
        "-f", "$reportFormat",
        "-o", "$reportName",
        "-i", "images/",
        "-p", "xmlfile=../$ecextractXmlFile",
        "-p", "ReportTitle=$reportTitle",
        "$reportDesignFile",
    );

    # add locale args
    foreach my $locale (@locales) {
        if ($locale ne "") {
            unshift @args, "-l $locale";
        }
    }

    return @args;
}

#-------------------------------------------------------------------------
# getLocales
#
#       Get any locales parameters
#-------------------------------------------------------------------------
sub getLocales() {
    my @locales;
    my @array = split(/[ ,.;:]+/, "$[/javascript myParent["Locales"]]");
    print "Report locales = ";
    foreach $word (@array) {
        if ($word ne "") {
            push(@locales, $word);
            print "$word ";
        }
    }
    print "\n";
    return @locales;
}

#-------------------------------------------------------------------------
# getChartFunction
#
#       Returns a Birt chart function that is equivilent to the
#       given table function.
#-------------------------------------------------------------------------
sub getChartFunction ($) {
    my ($propFunc) = @_;
    # Some chart function values are different than table functions
    if ($propFunc eq "Ave") {
        $propFunc = "Average";

    } elsif ($propFunc eq "COUNTDISTINCT") {
        $propFunc = "DistinctCount";
    }
    return $propFunc;
}

#-------------------------------------------------------------------------
# validatePropExpr
#
#       Simple validation of the optional Property Expression
#-------------------------------------------------------------------------
sub validatePropExpr($) {
    my ($propExpr) = @_;
    if ($propExpr ne "") {
        # expr for one or more repeating patterns that match:
        # <oper> <sign> <digits.digits>
        # where <oper> == +,-,*, or /
        #       <sign> == optional + or - sign
        #       decimal point is optional
        # E.g.
        #       /1000
        #       /3.14159 +99 *-1
        if ( $propExpr !~ /^(\s*[+\-\/\*]\s*[+-]*\d+\.*\d*\s*)+$/ ) {
            print "Invalid property expression: $propExpr\n";
            print "Expression must be an operator (+,-,*,/) followed by\n";
            print "a numeric constant (1000, 3.1415, -1, etc). Valid expressions may\n";
            print "be concatenated.\n";
            print "Examples: \n";
            print "     /1000\n";
            print "     /3.14159 +99 *-1\n";
            exit (1);
        }
    }
    return $propExpr;
}

#-------------------------------------------------------------------------
# registerReportTabAndLinks
#
#       Register the report in the project report tab and job details links area
#-------------------------------------------------------------------------
sub registerReportTabAndLinks() {
    # Register the report in the project report tab
    my $url = "$[/myJobStep/workspaceName]/$reportName";
    my $myGroupings = {
        reportType => $reportType,
        reportDate => getReportTimestamp(),
    };
    registerReportInLocales($cmdr, "$[jobId]", $url, $reportTitle, $myGroupings, \@locales);

    # NMB-7461
    # Set parent level tree groupings (e.g. just reportType)
    $myGroupings = {
        reportType => $reportType,
    };
    registerReportInLocales($cmdr, "$[jobId]", $url, $reportTitle, $myGroupings, \@locales);

    # set the report Link
    registerReportLinkInLocales($cmdr, "$[jobId]", $reportTitle, $url, \@locales);
}

#-------------------------------------------------------------------------
# safeFileName
#
#    Make a file name safe. This takes the extreme approach of only
#    allowing alphanumeric,dot,underscore,space and dash as characters.
#
# Results:
#     The return value is the same with unsupported characters replaced
#     by underscore.
#
# Side Effects:
#     None.
#
# Arguments:
#     string -       String whose contents should be changed
#-------------------------------------------------------------------------
sub safeFileName($) {
    my ($string) = @_;

    $string =~ s/[^a-zA-Z0-9 _\-\.]/_/g;
    return $string;
}
